{"version":3,"file":"react-selectable-fast.js","mappings":"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","sources":["webpack://React-Selectable-Fast/webpack/universalModuleDefinition","webpack://React-Selectable-Fast/external umd {\"root\":\"React\",\"commonjs2\":\"react\",\"commonjs\":\"react\",\"amd\":\"react\"}","webpack://React-Selectable-Fast/webpack/bootstrap","webpack://React-Selectable-Fast/webpack/runtime/compat get default export","webpack://React-Selectable-Fast/webpack/runtime/define property getters","webpack://React-Selectable-Fast/webpack/runtime/hasOwnProperty shorthand","webpack://React-Selectable-Fast/webpack/runtime/make namespace object","webpack://React-Selectable-Fast/./src/utils/getBoundsForNode.ts","webpack://React-Selectable-Fast/./src/utils/castTouchToMouseEvent.ts","webpack://React-Selectable-Fast/./src/utils/nodeInRoot.ts","webpack://React-Selectable-Fast/./src/utils/doObjectsCollide.ts","webpack://React-Selectable-Fast/./src/utils/index.ts","webpack://React-Selectable-Fast/./src/SelectableGroup.context.ts","webpack://React-Selectable-Fast/./src/Selectbox.tsx","webpack://React-Selectable-Fast/./src/SelectableGroup.tsx","webpack://React-Selectable-Fast/./src/utils/detectMouseButton.ts","webpack://React-Selectable-Fast/./src/CreateSelectable.tsx","webpack://React-Selectable-Fast/./src/SelectAll.tsx","webpack://React-Selectable-Fast/./src/DeselectAll.tsx"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"react\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"react\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"React-Selectable-Fast\"] = factory(require(\"react\"));\n\telse\n\t\troot[\"React-Selectable-Fast\"] = factory(root[\"React\"]);\n})(self, (__WEBPACK_EXTERNAL_MODULE__442__) => {\nreturn ","module.exports = __WEBPACK_EXTERNAL_MODULE__442__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export type TGetBoundsForNodeArgs = {\r\n  scrollTop: number\r\n  scrollLeft: number\r\n}\r\n\r\nexport type TComputedBounds = {\r\n  top: number\r\n  left: number\r\n  width: number\r\n  height: number\r\n  offsetWidth: number\r\n  offsetHeight: number\r\n}\r\n\r\nexport function getDocumentScroll() {\r\n  const documentScrollTop = Math.max(\r\n    window.pageYOffset,\r\n    document.documentElement.scrollTop,\r\n    document.body.scrollTop\r\n  )\r\n\r\n  const documentScrollLeft = Math.max(\r\n    window.pageXOffset,\r\n    document.documentElement.scrollLeft,\r\n    document.body.scrollLeft\r\n  )\r\n\r\n  return { documentScrollTop, documentScrollLeft }\r\n}\r\n\r\n/**\r\n * Given a node, get everything needed to calculate its boundaries\r\n */\r\nexport function getBoundsForNode(\r\n  node: HTMLElement,\r\n  containerScroll: TGetBoundsForNodeArgs = { scrollTop: 0, scrollLeft: 0 }\r\n): TComputedBounds[] {\r\n  const { scrollTop, scrollLeft } = containerScroll\r\n\r\n  return Array.from(node.getClientRects()).map(rect => ({\r\n    top: rect.top + scrollTop,\r\n    left: rect.left + scrollLeft,\r\n    offsetWidth: node.offsetWidth,\r\n    offsetHeight: node.offsetHeight,\r\n    width: rect.width,\r\n    height: rect.height,\r\n  }))\r\n}\r\n","import { MouseEvent } from 'react'\r\n\r\nconst propertiesToNormalize = ['pageX', 'pageY', 'clientX', 'clientY']\r\n\r\nfunction patchEventProperties(evt: any, touchKey: string) {\r\n  propertiesToNormalize.forEach(key => {\r\n    if (typeof evt[key] === 'undefined') {\r\n      evt[key] = evt[touchKey][0][key]\r\n    }\r\n  })\r\n}\r\n\r\n/**\r\n * Used to return event object with desktop (non-touch) format of event\r\n * coordinates, regardless of whether the action is from mobile or desktop.\r\n */\r\nexport function castTouchToMouseEvent(evt: any): MouseEvent<HTMLElement> {\r\n  if (evt.type.includes('mouse')) {\r\n    return evt\r\n  }\r\n\r\n  try {\r\n    if (evt.type === 'touchstart') {\r\n      patchEventProperties(evt, 'targetTouches')\r\n    } else if (evt.type === 'touchmove') {\r\n      patchEventProperties(evt, 'changedTouches')\r\n    }\r\n  } catch (err) {\r\n    console.error(err.message)\r\n  }\r\n\r\n  return evt as MouseEvent<HTMLElement>\r\n}\r\n","export function isNodeInRoot(node: HTMLElement, root: HTMLElement) {\r\n  while (node) {\r\n    if (node === root) {\r\n      return true\r\n    }\r\n\r\n    node = node.parentNode as any\r\n  }\r\n\r\n  return false\r\n}\r\n","import { TComputedBounds } from './getBoundsForNode'\r\n\r\ntype TAreBoundsCollideOptions = {\r\n  tolerance?: number\r\n  useOffsetSize?: boolean\r\n}\r\n\r\n/**\r\n * Given offsets, widths, and heights of two objects, determine if they collide (overlap).\r\n */\r\nconst areBoundsCollide = (\r\n  a: TComputedBounds,\r\n  b: TComputedBounds,\r\n  { tolerance = 0, useOffsetSize = false }: TAreBoundsCollideOptions\r\n) => {\r\n  const aHeight = useOffsetSize ? a.offsetHeight : a.height\r\n  const bHeight = useOffsetSize ? b.offsetHeight : b.height\r\n\r\n  const aWidth = useOffsetSize ? a.offsetWidth : a.width\r\n  const bWidth = useOffsetSize ? b.offsetWidth : b.width\r\n\r\n  return !(\r\n    a.top + aHeight - tolerance < b.top ||\r\n    // 'a' top doesn't touch 'b' bottom\r\n    a.top + tolerance > b.top + bHeight ||\r\n    // 'a' right doesn't touch 'b' left\r\n    a.left + aWidth - tolerance < b.left ||\r\n    // 'a' left doesn't touch 'b' right\r\n    a.left + tolerance > b.left + bWidth\r\n  )\r\n}\r\n\r\nfunction toArray(value: any) {\r\n  if (Array.isArray(value)) {\r\n    return value\r\n  }\r\n\r\n  return [value]\r\n}\r\n\r\n/**\r\n * Given two objects containing \"top\", \"left\", \"offsetWidth\" and \"offsetHeight\"\r\n * properties, determine if they collide.\r\n */\r\nexport function doObjectsCollide(\r\n  a: TComputedBounds | TComputedBounds[],\r\n  b: TComputedBounds | TComputedBounds[],\r\n  tolerance = 0,\r\n  delta = 1\r\n) {\r\n  const aBounds = toArray(a)\r\n  const bBounds = toArray(b)\r\n\r\n  for (let i = 0; i < aBounds.length; i++) {\r\n    for (let j = 0; j < bBounds.length; j++) {\r\n      return areBoundsCollide(aBounds[i], bBounds[j], { tolerance, useOffsetSize: delta === 1 })\r\n    }\r\n  }\r\n}\r\n","export const noop = () => {}\r\nexport type Maybe<T> = T | null\r\n\r\nexport * from './castTouchToMouseEvent'\r\nexport * from './detectMouseButton'\r\nexport * from './doObjectsCollide'\r\nexport * from './getBoundsForNode'\r\nexport * from './nodeInRoot'\r\n","import React from 'react'\r\n\r\nimport { TSelectableGroupContext, TSelectableItem } from './Selectable.types'\r\nimport { noop } from './utils'\r\n\r\nexport const SelectableGroupContext = React.createContext<TSelectableGroupContext>({\r\n  selectable: {\r\n    register(_: TSelectableItem) {},\r\n    unregister(_: TSelectableItem) {},\r\n    selectAll: noop,\r\n    clearSelection: noop,\r\n    getScrolledContainer: () => null,\r\n  },\r\n})\r\n","import React, { useState, useEffect, CSSProperties } from 'react'\r\n\r\nexport type TSetSelectboxState = React.Dispatch<React.SetStateAction<TSelectboxState>>\r\n\r\nexport type TSelectboxProps = {\r\n  fixedPosition: boolean\r\n  className: string\r\n  getSetState(setState: TSetSelectboxState): void\r\n}\r\n\r\nexport type TSelectboxState = {\r\n  y: number\r\n  x: number\r\n  width: number\r\n  height: number\r\n}\r\n\r\nconst initialState: TSelectboxState = {\r\n  y: 0,\r\n  x: 0,\r\n  width: 0,\r\n  height: 0,\r\n}\r\n\r\nexport function Selectbox(props: TSelectboxProps) {\r\n  const { fixedPosition, getSetState, className } = props\r\n  const [state, setState] = useState(initialState)\r\n\r\n  useEffect(() => {\r\n    getSetState(setState)\r\n  }, [])\r\n\r\n  const boxStyle: CSSProperties = {\r\n    left: state.x,\r\n    top: state.y,\r\n    width: state.width,\r\n    height: state.height,\r\n    zIndex: 9000,\r\n    position: fixedPosition ? 'fixed' : 'absolute',\r\n    cursor: 'default',\r\n    willChange: 'transform',\r\n    transform: 'translateZ(0)',\r\n  }\r\n\r\n  return <div className={className} style={boxStyle} />\r\n}\r\n\r\nSelectbox.defaultProps = {\r\n  className: 'selectable-selectbox',\r\n}\r\n","import React, { Component, MouseEvent, ComponentType, CSSProperties } from 'react'\r\n\r\nimport {\r\n  castTouchToMouseEvent,\r\n  detectMouseButton,\r\n  doObjectsCollide,\r\n  getBoundsForNode,\r\n  isNodeInRoot,\r\n  noop,\r\n  Maybe,\r\n  TComputedBounds,\r\n  getDocumentScroll,\r\n} from './utils'\r\nimport { TSelectableItem } from './Selectable.types'\r\nimport { SelectableGroupContext } from './SelectableGroup.context'\r\nimport { Selectbox, TSetSelectboxState } from './Selectbox'\r\n\r\ntype TSelectItemsOptions = {\r\n  isFromClick?: boolean\r\n}\r\n\r\ntype TMouseDownData = {\r\n  selectboxY: number\r\n  selectboxX: number\r\n  target: HTMLElement | null\r\n}\r\n\r\ntype TProcessItemOptions = TSelectItemsOptions & {\r\n  item: TSelectableItem\r\n  tolerance: number\r\n  selectboxBounds: TComputedBounds\r\n  enableDeselect: boolean\r\n  mixedDeselect: boolean\r\n}\r\n\r\nexport type TSelectableGroupProps = {\r\n  globalMouse?: boolean\r\n  ignoreList?: string[]\r\n  scrollSpeed?: number\r\n  minimumSpeedFactor?: number\r\n  allowClickWithoutSelected?: boolean\r\n  className?: string\r\n  clickClassName?: string\r\n  selectboxClassName?: string\r\n  style?: CSSProperties\r\n  selectionModeClass?: string\r\n  // Event that will fire when items are selected. Passes an array of keys.\r\n  onSelectionFinish?: Function\r\n  onSelectionClear?: Function\r\n  onSelectedItemUnmount?: Function\r\n  enableDeselect?: boolean\r\n  mixedDeselect?: boolean\r\n  deselectOnEsc?: boolean\r\n  resetOnStart?: boolean\r\n  disabled?: boolean\r\n  delta?: number\r\n  allowAltClick?: boolean\r\n  allowCtrlClick?: boolean\r\n  allowMetaClick?: boolean\r\n  allowShiftClick?: boolean\r\n  selectOnClick?: boolean\r\n  // Scroll container selector\r\n  scrollContainer?: string\r\n\r\n  /**\r\n   * Event that will fire rapidly during selection (while the selector is\r\n   * being dragged). Passes an array of keys.\r\n   */\r\n  duringSelection?: Function\r\n\r\n  // The component that will represent the Selectable DOM node\r\n  component?: ComponentType\r\n\r\n  /**\r\n   * Amount of forgiveness an item will offer to the selectbox before registering\r\n   * a selection, i.e. if only 1px of the item is in the selection, it shouldn't be\r\n   * included.\r\n   */\r\n  tolerance?: number\r\n\r\n  /**\r\n   * In some cases, it the bounding box may need fixed positioning, if your layout\r\n   * is relying on fixed positioned elements, for instance.\r\n   * @type boolean\r\n   */\r\n  fixedPosition?: boolean\r\n}\r\n\r\nexport class SelectableGroup extends Component<TSelectableGroupProps> {\r\n  static defaultProps = {\r\n    clickClassName: '',\r\n    tolerance: 0,\r\n    globalMouse: false,\r\n    ignoreList: [],\r\n    scrollSpeed: 0.25,\r\n    minimumSpeedFactor: 60,\r\n    duringSelection: noop,\r\n    onSelectionFinish: noop,\r\n    onSelectionClear: noop,\r\n    onSelectedItemUnmount: noop,\r\n    allowClickWithoutSelected: true,\r\n    selectionModeClass: 'in-selection-mode',\r\n    resetOnStart: false,\r\n    disabled: false,\r\n    deselectOnEsc: true,\r\n    fixedPosition: false,\r\n    delta: 1,\r\n    allowAltClick: false,\r\n    allowCtrlClick: false,\r\n    allowMetaClick: false,\r\n    allowShiftClick: false,\r\n    selectOnClick: true,\r\n  }\r\n\r\n  state = { selectionMode: false }\r\n\r\n  mouseDownStarted = false\r\n\r\n  mouseMoveStarted = false\r\n\r\n  mouseMoved = false\r\n\r\n  mouseUpStarted = false\r\n\r\n  selectionStarted = false\r\n\r\n  deselectionStarted = false\r\n\r\n  clickedItem?: TSelectableItem\r\n\r\n  mouseDownData: TMouseDownData = {\r\n    selectboxY: 0,\r\n    selectboxX: 0,\r\n    target: null,\r\n  }\r\n\r\n  registry = new Set<TSelectableItem>()\r\n\r\n  selectedItems = new Set<TSelectableItem>()\r\n\r\n  selectingItems = new Set<TSelectableItem>()\r\n\r\n  ignoreCheckCache = new Map<HTMLElement, boolean>()\r\n\r\n  ignoreList = this.props.ignoreList!.concat(['.selectable-select-all', '.selectable-deselect-all'])\r\n\r\n  ignoreListNodes: HTMLElement[] = []\r\n\r\n  setSelectboxState: Maybe<TSetSelectboxState> = null\r\n\r\n  selectableGroup: Maybe<HTMLElement> = null\r\n\r\n  scrollContainer: Maybe<HTMLElement> = null\r\n\r\n  maxScrollTop = 0\r\n\r\n  maxScrollLeft = 0\r\n\r\n  scrollBounds: Maybe<DOMRect | ClientRect> = null\r\n\r\n  containerScroll = {\r\n    scrollTop: 0,\r\n    scrollLeft: 0,\r\n  }\r\n\r\n  documentScroll = {\r\n    scrollTop: 0,\r\n    scrollLeft: 0,\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (this.props.scrollContainer) {\r\n      this.scrollContainer = document.querySelector(this.props.scrollContainer)\r\n    } else {\r\n      this.scrollContainer = this.selectableGroup\r\n    }\r\n\r\n    this.scrollContainer!.addEventListener('scroll', this.saveContainerScroll)\r\n    document.addEventListener('scroll', this.saveDocumentScroll)\r\n\r\n    this.selectableGroup!.addEventListener('mousedown', this.mouseDown)\r\n    this.selectableGroup!.addEventListener('touchstart', this.mouseDown)\r\n\r\n    if (this.props.deselectOnEsc) {\r\n      document.addEventListener('keydown', this.keyListener)\r\n      document.addEventListener('keyup', this.keyListener)\r\n    }\r\n\r\n    this.removeIgnoredItemsFromRegistry()\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.scrollContainer!.removeEventListener('scroll', this.saveContainerScroll)\r\n    document.removeEventListener('scroll', this.saveDocumentScroll)\r\n\r\n    this.selectableGroup!.removeEventListener('mousedown', this.mouseDown)\r\n    this.selectableGroup!.removeEventListener('touchstart', this.mouseDown)\r\n\r\n    if (this.props.deselectOnEsc) {\r\n      document.removeEventListener('keydown', this.keyListener)\r\n      document.removeEventListener('keyup', this.keyListener)\r\n    }\r\n\r\n    this.removeTempEventListeners()\r\n\r\n    // Prevent onSelectedItemUnmount calls\r\n    this.selectedItems.clear()\r\n    this.selectingItems.clear()\r\n  }\r\n\r\n  saveContainerScroll = () => {\r\n    const { scrollTop, scrollLeft } = this.scrollContainer!\r\n\r\n    this.containerScroll = {\r\n      scrollTop,\r\n      scrollLeft,\r\n    }\r\n  }\r\n\r\n  saveDocumentScroll = () => {\r\n    const { documentScrollLeft, documentScrollTop } = getDocumentScroll()\r\n\r\n    this.documentScroll = {\r\n      scrollTop: documentScrollTop,\r\n      scrollLeft: documentScrollLeft,\r\n    }\r\n  }\r\n\r\n  get containerDocumentScroll() {\r\n    return {\r\n      scrollTop: this.containerScroll.scrollTop + this.documentScroll.scrollTop,\r\n      scrollLeft: this.containerScroll.scrollLeft + this.documentScroll.scrollLeft,\r\n    }\r\n  }\r\n\r\n  removeTempEventListeners() {\r\n    document.removeEventListener('mousemove', this.updateSelectBox)\r\n    document.removeEventListener('touchmove', this.updateSelectBox)\r\n    document.removeEventListener('mouseup', this.mouseUp)\r\n    document.removeEventListener('touchend', this.mouseUp)\r\n  }\r\n\r\n  updateRootBounds() {\r\n    this.scrollBounds = this.scrollContainer!.getBoundingClientRect()\r\n    this.maxScrollTop = this.scrollContainer!.scrollHeight - this.scrollContainer!.clientHeight\r\n    this.maxScrollLeft = this.scrollContainer!.scrollWidth - this.scrollContainer!.clientWidth\r\n  }\r\n\r\n  updateRegistry = () => {\r\n    for (const selectableItem of this.registry.values()) {\r\n      selectableItem.updateBounds(this.containerDocumentScroll)\r\n    }\r\n  }\r\n\r\n  registerSelectable = (selectableItem: TSelectableItem) => {\r\n    this.registry.add(selectableItem)\r\n\r\n    if (selectableItem.state.isSelected) {\r\n      this.selectedItems.add(selectableItem)\r\n    }\r\n  }\r\n\r\n  unregisterSelectable = (selectableItem: TSelectableItem) => {\r\n    this.registry.delete(selectableItem)\r\n\r\n    const isRemoved =\r\n      this.selectedItems.has(selectableItem) || this.selectingItems.has(selectableItem)\r\n\r\n    this.selectedItems.delete(selectableItem)\r\n    this.selectingItems.delete(selectableItem)\r\n\r\n    if (isRemoved) {\r\n      // Notify third-party that component did unmount and handled item probably should be deleted\r\n      this.props.onSelectedItemUnmount!(selectableItem, [...this.selectedItems])\r\n    }\r\n  }\r\n\r\n  toggleSelectionMode() {\r\n    const {\r\n      selectedItems,\r\n      state: { selectionMode },\r\n    } = this\r\n\r\n    if (selectedItems.size && !selectionMode) {\r\n      this.setState({ selectionMode: true })\r\n    }\r\n    if (!selectedItems.size && selectionMode) {\r\n      this.setState({ selectionMode: false })\r\n    }\r\n  }\r\n\r\n  private updateContainerScroll = (evt: MouseEvent<HTMLElement>) => {\r\n    const { scrollTop, scrollLeft } = this.containerScroll\r\n\r\n    this.checkScrollTop(evt.clientY, scrollTop)\r\n    this.checkScrollBottom(evt.clientY, scrollTop)\r\n    this.checkScrollLeft(evt.clientX, scrollLeft)\r\n    this.checkScrollRight(evt.clientX, scrollLeft)\r\n  }\r\n\r\n  getScrollStep = (offset: number) => {\r\n    const { minimumSpeedFactor, scrollSpeed } = this.props\r\n\r\n    return Math.max(offset, minimumSpeedFactor!) * scrollSpeed!\r\n  }\r\n\r\n  checkScrollTop = (clientY: number, currentTop: number) => {\r\n    const offset = this.scrollBounds!.top - clientY\r\n\r\n    if (offset > 0 || clientY < 0) {\r\n      this.scrollContainer!.scrollTop = currentTop - this.getScrollStep(offset)\r\n    }\r\n  }\r\n\r\n  checkScrollBottom = (clientY: number, currentTop: number) => {\r\n    const offset = clientY - this.scrollBounds!.bottom\r\n\r\n    if (offset > 0 || clientY > window.innerHeight) {\r\n      const newTop = currentTop + this.getScrollStep(offset)\r\n      this.scrollContainer!.scrollTop = Math.min(newTop, this.maxScrollTop)\r\n    }\r\n  }\r\n\r\n  checkScrollLeft = (clientX: number, currentLeft: number) => {\r\n    const offset = this.scrollBounds!.left - clientX\r\n\r\n    if (offset > 0 || clientX < 0) {\r\n      const newLeft = currentLeft - this.getScrollStep(offset)\r\n      this.scrollContainer!.scrollLeft = newLeft\r\n    }\r\n  }\r\n\r\n  checkScrollRight = (clientX: number, currentLeft: number) => {\r\n    const offset = clientX - this.scrollBounds!.right\r\n\r\n    if (offset > 0 || clientX > window.innerWidth) {\r\n      const newLeft = currentLeft + this.getScrollStep(offset)\r\n      this.scrollContainer!.scrollLeft = Math.min(newLeft, this.maxScrollLeft)\r\n    }\r\n  }\r\n\r\n  updateSelectBox = (event: Event) => {\r\n    const evt = castTouchToMouseEvent(event)\r\n    this.updateContainerScroll(evt)\r\n\r\n    if (this.mouseMoveStarted) {\r\n      return\r\n    }\r\n    this.mouseMoveStarted = true\r\n    this.mouseMoved = true\r\n\r\n    const { mouseDownData } = this\r\n    const { clientX, clientY } = evt\r\n\r\n    const pointY = clientY - this.scrollBounds!.top + this.containerScroll.scrollTop\r\n    const selectboxY = Math.min(pointY, mouseDownData.selectboxY)\r\n\r\n    const pointX = clientX - this.scrollBounds!.left + this.containerScroll.scrollLeft\r\n    const selectboxX = Math.min(pointX, mouseDownData.selectboxX)\r\n\r\n    const selectboxState = {\r\n      x: selectboxX,\r\n      y: selectboxY,\r\n      width: Math.abs(pointX - mouseDownData.selectboxX),\r\n      height: Math.abs(pointY - mouseDownData.selectboxY),\r\n    }\r\n\r\n    this.setSelectboxState!(selectboxState)\r\n\r\n    const selectboxBounds = {\r\n      top: selectboxState.y + this.scrollBounds!.top + this.documentScroll.scrollTop,\r\n      left: selectboxState.x + this.scrollBounds!.left + this.documentScroll.scrollLeft,\r\n      width: selectboxState.width,\r\n      height: selectboxState.height,\r\n      offsetWidth: selectboxState.width || 1,\r\n      offsetHeight: selectboxState.height || 1,\r\n    }\r\n\r\n    this.selectItems(selectboxBounds)\r\n    this.props.duringSelection!([...this.selectingItems])\r\n    this.mouseMoveStarted = false\r\n  }\r\n\r\n  selectItems = (selectboxBounds: TComputedBounds, options: TSelectItemsOptions = {}) => {\r\n    const { tolerance, enableDeselect, mixedDeselect } = this.props\r\n\r\n    for (const item of this.registry.values()) {\r\n      this.processItem({\r\n        item,\r\n        selectboxBounds,\r\n        tolerance: tolerance!,\r\n        mixedDeselect: mixedDeselect!,\r\n        enableDeselect: enableDeselect!,\r\n        isFromClick: options && options.isFromClick,\r\n      })\r\n    }\r\n  }\r\n\r\n  processItem(options: TProcessItemOptions) {\r\n    const { item, tolerance, selectboxBounds, enableDeselect, mixedDeselect, isFromClick } = options\r\n\r\n    const { delta } = this.props\r\n    const isCollided = doObjectsCollide(selectboxBounds, item.bounds!, tolerance, delta)\r\n    const { isSelecting, isSelected } = item.state\r\n\r\n    if (isFromClick && isCollided) {\r\n      if (isSelected) {\r\n        this.selectedItems.delete(item)\r\n      } else {\r\n        this.selectedItems.add(item)\r\n      }\r\n\r\n      item.setState({ isSelected: !isSelected })\r\n      this.clickedItem = item\r\n\r\n      return item\r\n    }\r\n\r\n    if (!isFromClick && isCollided) {\r\n      if (isSelected && enableDeselect && (!this.selectionStarted || mixedDeselect)) {\r\n        item.setState({ isSelected: false })\r\n        item.deselected = true\r\n\r\n        this.deselectionStarted = true\r\n\r\n        return this.selectedItems.delete(item)\r\n      }\r\n\r\n      const canSelect = mixedDeselect ? !item.deselected : !this.deselectionStarted\r\n\r\n      if (!isSelecting && !isSelected && canSelect) {\r\n        item.setState({ isSelecting: true })\r\n\r\n        this.selectionStarted = true\r\n        this.selectingItems.add(item)\r\n\r\n        return { updateSelecting: true }\r\n      }\r\n    }\r\n\r\n    if (!isFromClick && !isCollided && isSelecting) {\r\n      if (this.selectingItems.has(item)) {\r\n        item.setState({ isSelecting: false })\r\n\r\n        this.selectingItems.delete(item)\r\n\r\n        return { updateSelecting: true }\r\n      }\r\n    }\r\n\r\n    return null\r\n  }\r\n\r\n  clearSelection = () => {\r\n    for (const item of this.selectedItems.values()) {\r\n      item.setState({ isSelected: false })\r\n      this.selectedItems.delete(item)\r\n    }\r\n\r\n    this.setState({ selectionMode: false })\r\n    this.props.onSelectionFinish!([...this.selectedItems])\r\n    this.props.onSelectionClear!()\r\n  }\r\n\r\n  selectAll = () => {\r\n    this.removeIgnoredItemsFromRegistry()\r\n\r\n    for (const item of this.registry.values()) {\r\n      if (!item.state.isSelected) {\r\n        item.setState({ isSelected: true })\r\n        this.selectedItems.add(item)\r\n      }\r\n    }\r\n\r\n    this.setState({ selectionMode: true })\r\n    this.props.onSelectionFinish!([...this.selectedItems])\r\n  }\r\n\r\n  isInIgnoreList(target: HTMLElement | null) {\r\n    if (!target) {\r\n      return\r\n    }\r\n\r\n    if (this.ignoreCheckCache.get(target) !== undefined) {\r\n      return this.ignoreCheckCache.get(target)\r\n    }\r\n\r\n    const shouldBeIgnored = this.ignoreListNodes.some(\r\n      ignoredNode => target === ignoredNode || ignoredNode.contains(target)\r\n    )\r\n\r\n    this.ignoreCheckCache.set(target, shouldBeIgnored)\r\n\r\n    return shouldBeIgnored\r\n  }\r\n\r\n  removeIgnoredItemsFromRegistry() {\r\n    this.ignoreListNodes = Array.from(document.querySelectorAll(this.ignoreList.join(', ')))\r\n\r\n    this.registry = new Set([...this.registry].filter(item => !this.isInIgnoreList(item.node)))\r\n    this.selectedItems = new Set(\r\n      [...this.selectedItems].filter(item => !this.isInIgnoreList(item.node))\r\n    )\r\n  }\r\n\r\n  mouseDown = (e: Event) => {\r\n    const isNotLeftButtonClick =\r\n      !e.type.includes('touch') &&\r\n      !detectMouseButton(e as any, 1, {\r\n        allowAltClick: this.props.allowAltClick,\r\n        allowCtrlClick: this.props.allowCtrlClick,\r\n        allowMetaClick: this.props.allowMetaClick,\r\n        allowShiftClick: this.props.allowShiftClick,\r\n      })\r\n    if (this.mouseDownStarted || this.props.disabled || isNotLeftButtonClick) {\r\n      return\r\n    }\r\n\r\n    this.removeIgnoredItemsFromRegistry()\r\n\r\n    if (this.isInIgnoreList(e.target as HTMLElement)) {\r\n      this.mouseDownStarted = false\r\n\r\n      return\r\n    }\r\n\r\n    if (this.props.resetOnStart) {\r\n      this.clearSelection()\r\n    }\r\n    this.mouseDownStarted = true\r\n    this.mouseUpStarted = false\r\n    const evt = castTouchToMouseEvent(e)\r\n\r\n    if (!this.props.globalMouse && !isNodeInRoot(evt.target as any, this.selectableGroup!)) {\r\n      const [bounds] = getBoundsForNode(this.selectableGroup!, this.documentScroll)\r\n      const collides = doObjectsCollide(\r\n        {\r\n          top: bounds.top,\r\n          left: bounds.left,\r\n          width: 0,\r\n          height: 0,\r\n          offsetHeight: bounds.offsetHeight,\r\n          offsetWidth: bounds.offsetWidth,\r\n        },\r\n        {\r\n          top: evt.pageY,\r\n          left: evt.pageX,\r\n          width: 0,\r\n          height: 0,\r\n          offsetWidth: 0,\r\n          offsetHeight: 0,\r\n        }\r\n      )\r\n\r\n      if (!collides) {\r\n        return\r\n      }\r\n    }\r\n\r\n    this.updateRootBounds()\r\n    this.updateRegistry()\r\n\r\n    this.mouseDownData = {\r\n      target: evt.target as HTMLElement,\r\n      selectboxY: evt.clientY - this.scrollBounds!.top + this.containerScroll.scrollTop,\r\n      selectboxX: evt.clientX - this.scrollBounds!.left + this.containerScroll.scrollLeft,\r\n    }\r\n\r\n    evt.preventDefault()\r\n\r\n    document.addEventListener('mousemove', this.updateSelectBox)\r\n    document.addEventListener('touchmove', this.updateSelectBox)\r\n    document.addEventListener('mouseup', this.mouseUp)\r\n    document.addEventListener('touchend', this.mouseUp)\r\n  }\r\n\r\n  preventEvent(target: HTMLElement, type: string) {\r\n    const preventHandler = (evt: Event) => {\r\n      target.removeEventListener(type, preventHandler, true)\r\n      evt.preventDefault()\r\n      evt.stopPropagation()\r\n    }\r\n    target.addEventListener(type, preventHandler, true)\r\n  }\r\n\r\n  private mouseUp = (event: Event) => {\r\n    if (this.mouseUpStarted) {\r\n      return\r\n    }\r\n\r\n    this.mouseUpStarted = true\r\n    this.mouseDownStarted = false\r\n    this.removeTempEventListeners()\r\n\r\n    if (!this.mouseDownData) {\r\n      return\r\n    }\r\n\r\n    const evt: any = castTouchToMouseEvent(event)\r\n    const { pageX, pageY } = evt\r\n\r\n    if (!this.mouseMoved && isNodeInRoot(evt.target as HTMLElement, this.selectableGroup!)) {\r\n      this.handleClick(evt, pageY, pageX)\r\n    } else {\r\n      for (const item of this.selectingItems.values()) {\r\n        item.setState({ isSelected: true, isSelecting: false })\r\n      }\r\n      this.selectedItems = new Set([...this.selectedItems, ...this.selectingItems])\r\n      this.selectingItems.clear()\r\n\r\n      if (evt.which === 1 && this.mouseDownData.target === evt.target) {\r\n        this.preventEvent(evt.target, 'click')\r\n      }\r\n\r\n      this.setSelectboxState!({\r\n        x: 0,\r\n        y: 0,\r\n        width: 0,\r\n        height: 0,\r\n      })\r\n      this.props.onSelectionFinish!([...this.selectedItems])\r\n    }\r\n\r\n    this.toggleSelectionMode()\r\n    this.cleanUp()\r\n    this.mouseMoved = false\r\n  }\r\n\r\n  keyListener = (evt: KeyboardEvent) => {\r\n    if (evt.keyCode === 27) {\r\n      // escape\r\n      this.clearSelection()\r\n    }\r\n  }\r\n\r\n  cleanUp() {\r\n    this.deselectionStarted = false\r\n    this.selectionStarted = false\r\n\r\n    if (this.props.mixedDeselect) {\r\n      for (const item of this.registry.values()) {\r\n        item.deselected = false\r\n      }\r\n    }\r\n  }\r\n\r\n  getGroupRef = (ref: HTMLElement | null) => {\r\n    this.selectableGroup = ref\r\n  }\r\n\r\n  getSelectboxSetState = (setState: TSetSelectboxState) => {\r\n    this.setSelectboxState = setState\r\n  }\r\n\r\n  // eslint-disable-next-line react/sort-comp\r\n  defaultContainerStyle: CSSProperties = {\r\n    position: 'relative',\r\n  }\r\n\r\n  contextValue = {\r\n    selectable: {\r\n      register: this.registerSelectable,\r\n      unregister: this.unregisterSelectable,\r\n      selectAll: this.selectAll,\r\n      clearSelection: this.clearSelection,\r\n      getScrolledContainer: () => this.scrollContainer,\r\n    },\r\n  }\r\n\r\n  handleClick(evt: any, top: number, left: number) {\r\n    if (!this.props.selectOnClick) {\r\n      return\r\n    }\r\n\r\n    const { clickClassName, allowClickWithoutSelected, onSelectionFinish } = this.props\r\n    const classNames = (evt.target as HTMLElement).classList || []\r\n    const isMouseUpOnClickElement = Array.from(classNames).includes(clickClassName!)\r\n\r\n    if (\r\n      allowClickWithoutSelected ||\r\n      this.selectedItems.size ||\r\n      isMouseUpOnClickElement ||\r\n      evt.ctrlKey\r\n    ) {\r\n      this.selectItems(\r\n        {\r\n          top,\r\n          left,\r\n          width: 0,\r\n          height: 0,\r\n          offsetWidth: 0,\r\n          offsetHeight: 0,\r\n        },\r\n        { isFromClick: true }\r\n      )\r\n\r\n      onSelectionFinish!([...this.selectedItems], this.clickedItem)\r\n\r\n      if (evt.which === 1) {\r\n        this.preventEvent(evt.target, 'click')\r\n      }\r\n      if (evt.which === 2 || evt.which === 3) {\r\n        this.preventEvent(evt.target, 'contextmenu')\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { selectionMode } = this.state\r\n    const {\r\n      component: GroupComponent = 'div',\r\n      className,\r\n      style,\r\n      selectionModeClass,\r\n      fixedPosition,\r\n      selectboxClassName,\r\n      children,\r\n    } = this.props\r\n\r\n    return (\r\n      <SelectableGroupContext.Provider value={this.contextValue}>\r\n        <GroupComponent\r\n          ref={this.getGroupRef}\r\n          style={{ ...this.defaultContainerStyle, ...style }}\r\n          className={`${className} ${selectionMode ? selectionModeClass : ''}`}\r\n        >\r\n          {children}\r\n          <Selectbox\r\n            getSetState={this.getSelectboxSetState}\r\n            className={selectboxClassName}\r\n            fixedPosition={fixedPosition!}\r\n          />\r\n        </GroupComponent>\r\n      </SelectableGroupContext.Provider>\r\n    )\r\n  }\r\n}\r\n","import { MouseEvent } from 'react'\r\n\r\ntype TDetectMouseButtonOptions = {\r\n  allowAltClick?: boolean\r\n  allowCtrlClick?: boolean\r\n  allowMetaClick?: boolean\r\n  allowShiftClick?: boolean\r\n}\r\n\r\n/**\r\n * @buttonNumber\r\n * 1: Left button\r\n * 2: Middle/Right button\r\n * 3: Right/Back button\r\n */\r\nexport function detectMouseButton(\r\n  evt: MouseEvent<HTMLElement>,\r\n  buttonNumber = 1,\r\n  options: TDetectMouseButtonOptions = {}\r\n) {\r\n  if (\r\n    (evt.metaKey && !options.allowMetaClick) ||\r\n    (evt.ctrlKey && !options.allowCtrlClick) ||\r\n    (evt.altKey && !options.allowAltClick) ||\r\n    (evt.shiftKey && !options.allowShiftClick)\r\n  ) {\r\n    return false\r\n  }\r\n\r\n  if ('buttons' in evt) {\r\n    return evt.buttons === buttonNumber\r\n  }\r\n\r\n  if ('which' in evt) {\r\n    return (evt as KeyboardEvent).which === buttonNumber\r\n  }\r\n\r\n  return (evt as MouseEvent).button === buttonNumber - 1\r\n}\r\n","import React, { Component, ComponentType } from 'react'\r\n\r\nimport { getBoundsForNode, TComputedBounds, TGetBoundsForNodeArgs } from './utils'\r\nimport { TSelectableItemState, TSelectableItemProps } from './Selectable.types'\r\nimport { SelectableGroupContext } from './SelectableGroup.context'\r\n\r\ntype TAddedProps = Partial<Pick<TSelectableItemProps, 'isSelected'>>\r\n\r\nexport const createSelectable = <T extends any>(\r\n  WrappedComponent: ComponentType<TSelectableItemProps & T>\r\n): ComponentType<T & TAddedProps> =>\r\n  class SelectableItem extends Component<T & TAddedProps, TSelectableItemState> {\r\n    static contextType = SelectableGroupContext\r\n\r\n    static defaultProps = {\r\n      isSelected: false,\r\n    }\r\n\r\n    state = {\r\n      isSelected: this.props.isSelected,\r\n      isSelecting: false,\r\n    }\r\n\r\n    node: HTMLElement | null = null\r\n\r\n    bounds: TComputedBounds[] | null = null\r\n\r\n    componentDidMount() {\r\n      this.updateBounds()\r\n      this.context.selectable.register(this)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n      this.context.selectable.unregister(this)\r\n    }\r\n\r\n    updateBounds = (containerScroll?: TGetBoundsForNodeArgs) => {\r\n      this.bounds = getBoundsForNode(this.node!, containerScroll)\r\n    }\r\n\r\n    getSelectableRef = (ref: HTMLElement | null) => {\r\n      this.node = ref\r\n    }\r\n\r\n    render() {\r\n      return (\r\n        <WrappedComponent {...this.props} {...this.state} selectableRef={this.getSelectableRef} />\r\n      )\r\n    }\r\n  }\r\n","import React, { Component, ReactNode, FunctionComponent } from 'react'\r\n\r\nimport { SelectableGroupContext } from './SelectableGroup.context'\r\n\r\ntype TSelectAllProps = {\r\n  children: ReactNode\r\n  component?: string | FunctionComponent\r\n  className?: string\r\n  [key: string]: any\r\n}\r\n\r\nexport class SelectAll extends Component<TSelectAllProps> {\r\n  static contextType = SelectableGroupContext\r\n\r\n  root: HTMLDivElement | null = null\r\n\r\n  componentDidMount() {\r\n    this.root!.addEventListener('mousedown', (evt: Event) => evt.stopPropagation())\r\n  }\r\n\r\n  getRootRef = (ref: HTMLDivElement | null) => {\r\n    this.root = ref\r\n  }\r\n\r\n  render() {\r\n    const { component = 'div', children, className = '', ...rest } = this.props\r\n    const ButtonComponent = component as FunctionComponent<any>\r\n\r\n    return (\r\n      <ButtonComponent\r\n        ref={this.getRootRef}\r\n        className={`selectable-select-all ${className}`}\r\n        onClick={this.context.selectable.selectAll}\r\n        {...rest}\r\n      >\r\n        {children}\r\n      </ButtonComponent>\r\n    )\r\n  }\r\n}\r\n","import React, { Component, FunctionComponent, ReactNode } from 'react'\r\n\r\nimport { SelectableGroupContext } from './SelectableGroup.context'\r\n\r\ntype TDeselectAllProps = {\r\n  children: ReactNode\r\n  component?: string | FunctionComponent\r\n  className?: string\r\n  [key: string]: any\r\n}\r\n\r\nexport class DeselectAll extends Component<TDeselectAllProps> {\r\n  static contextType = SelectableGroupContext\r\n\r\n  root: HTMLDivElement | null = null\r\n\r\n  componentDidMount() {\r\n    this.root!.addEventListener('mousedown', (evt: Event) => evt.stopPropagation())\r\n  }\r\n\r\n  getRootRef = (ref: HTMLDivElement | null) => {\r\n    this.root = ref\r\n  }\r\n\r\n  render() {\r\n    const { component = 'div', children, className, ...rest } = this.props\r\n    const ButtonComponent = component as FunctionComponent<any>\r\n\r\n    return (\r\n      <ButtonComponent\r\n        ref={this.getRootRef}\r\n        className={`selectable-select-all ${className}`}\r\n        onClick={this.context.selectable.clearSelection}\r\n        {...rest}\r\n      >\r\n        {children}\r\n      </ButtonComponent>\r\n    )\r\n  }\r\n}\r\n"],"names":["root","factory","exports","module","require","define","amd","self","__WEBPACK_EXTERNAL_MODULE__442__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","getBoundsForNode","node","containerScroll","arguments","length","scrollTop","scrollLeft","Array","from","getClientRects","map","rect","top","left","offsetWidth","offsetHeight","width","height","propertiesToNormalize","patchEventProperties","evt","touchKey","forEach","castTouchToMouseEvent","type","includes","err","console","error","message","isNodeInRoot","parentNode","areBoundsCollide","b","_ref","_ref$tolerance","tolerance","_ref$useOffsetSize","useOffsetSize","aHeight","bHeight","aWidth","bWidth","toArray","isArray","doObjectsCollide","delta","aBounds","bBounds","i","j","noop","SelectableGroupContext","React","selectable","register","_","unregister","selectAll","clearSelection","getScrolledContainer","initialState","y","x","Selectbox","props","fixedPosition","getSetState","className","_useState2","useState","state","setState","useEffect","boxStyle","zIndex","position","cursor","willChange","transform","style","defaultProps","SelectableGroup","_Component","_inherits","_super","_this","_classCallCheck","_len","args","_key","_defineProperty","_assertThisInitialized","apply","concat","selectionMode","selectboxY","selectboxX","target","Set","Map","ignoreList","scrollContainer","_getDocumentScroll","documentScrollTop","Math","max","window","pageYOffset","document","documentElement","body","documentScrollLeft","pageXOffset","documentScroll","_step","_iterator","_createForOfIteratorHelper","registry","values","s","done","updateBounds","containerDocumentScroll","e","f","selectableItem","add","isSelected","selectedItems","isRemoved","has","selectingItems","onSelectedItemUnmount","_toConsumableArray","_this$containerScroll","checkScrollTop","clientY","checkScrollBottom","checkScrollLeft","clientX","checkScrollRight","offset","_this$props","minimumSpeedFactor","scrollSpeed","currentTop","scrollBounds","getScrollStep","bottom","innerHeight","newTop","min","maxScrollTop","currentLeft","newLeft","right","innerWidth","maxScrollLeft","event","updateContainerScroll","mouseMoveStarted","mouseMoved","mouseDownData","pointY","pointX","selectboxState","abs","setSelectboxState","selectboxBounds","selectItems","duringSelection","_step2","options","_this$props2","enableDeselect","mixedDeselect","_iterator2","item","processItem","isFromClick","_step3","_iterator3","onSelectionFinish","onSelectionClear","removeIgnoredItemsFromRegistry","_step4","_iterator4","isNotLeftButtonClick","buttonNumber","metaKey","allowMetaClick","ctrlKey","allowCtrlClick","altKey","allowAltClick","shiftKey","allowShiftClick","buttons","which","button","detectMouseButton","mouseDownStarted","disabled","isInIgnoreList","resetOnStart","mouseUpStarted","globalMouse","selectableGroup","bounds","pageY","pageX","updateRootBounds","updateRegistry","preventDefault","addEventListener","updateSelectBox","mouseUp","removeTempEventListeners","handleClick","_step5","_iterator5","isSelecting","clear","preventEvent","toggleSelectionMode","cleanUp","keyCode","ref","registerSelectable","unregisterSelectable","this","querySelector","saveContainerScroll","saveDocumentScroll","mouseDown","deselectOnEsc","keyListener","removeEventListener","getBoundingClientRect","scrollHeight","clientHeight","scrollWidth","clientWidth","size","isCollided","_item$state","clickedItem","selectionStarted","deselected","deselectionStarted","canSelect","updateSelecting","ignoreCheckCache","shouldBeIgnored","ignoreListNodes","some","ignoredNode","contains","set","_this2","querySelectorAll","join","filter","preventHandler","stopPropagation","_step6","_iterator6","selectOnClick","_this$props3","clickClassName","allowClickWithoutSelected","classNames","classList","isMouseUpOnClickElement","_this$props4","_this$props4$componen","component","GroupComponent","selectionModeClass","selectboxClassName","children","Provider","contextValue","getGroupRef","_objectSpread","defaultContainerStyle","getSelectboxSetState","Component","createSelectable","WrappedComponent","_class","SelectableItem","context","_extends","selectableRef","getSelectableRef","SelectAll","_this$props$component","_this$props$className","rest","_objectWithoutProperties","ButtonComponent","getRootRef","onClick","DeselectAll"],"sourceRoot":""}